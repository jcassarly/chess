/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package helpers;

import gameboard.Square;
import helpers.Message;
import helpers.PieceSprite;
import pieces.*;

/**
 *
 * @author Jared Cassarly
 */
public class Queening extends javax.swing.JFrame {
    
    private Square parent;
    private ModalityPanel owner;
    
    private boolean isWhite;
    
    public Queening() {
        initComponents();
    }

    /**
     * Creates new form Queening
     * @param isWhite
     * @param parent
     * @param owner
     */
    public Queening(boolean isWhite, Square parent, ModalityPanel owner) {
        this.parent = parent;
        this.owner = owner;
        
        this.isWhite = isWhite;
        
        initComponents();
        PieceSprite queenSprite;
        PieceSprite rookSprite;
        PieceSprite bishopSprite;
        PieceSprite knightSprite;
        if (isWhite) {
            queenSprite = new PieceSprite(Piece.QUEEN_ID);
            rookSprite = new PieceSprite(Piece.ROOK_ID);
            bishopSprite = new PieceSprite(Piece.BISHOP_ID);
            knightSprite = new PieceSprite(Piece.KNIGHT_ID);
        }
        else {
            queenSprite = new PieceSprite(Piece.QUEEN_ID + 6);
            rookSprite = new PieceSprite(Piece.ROOK_ID + 6);
            bishopSprite = new PieceSprite(Piece.BISHOP_ID + 6);
            knightSprite = new PieceSprite(Piece.KNIGHT_ID + 6);
        }
        
        queenSprite.loadSprite(queen);
        rookSprite.loadSprite(rook);
        bishopSprite.loadSprite(bishop);
        knightSprite.loadSprite(knight);
    }
    
    public Piece getSelected() {
        if (queen.isSelected()) {
            return new Queen(isWhite);
        }
        else if (rook.isSelected()) {
            return new Rook(isWhite);
        }
        else if (bishop.isSelected()) {
            return new Bishop(isWhite);
        }
        else if (knight.isSelected()) {
            return new Knight(isWhite);
        }
        else {
            Message.errorMessage("A piece was not selected");
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        instructions = new javax.swing.JLabel();
        queen = new javax.swing.JToggleButton();
        rook = new javax.swing.JToggleButton();
        bishop = new javax.swing.JToggleButton();
        knight = new javax.swing.JToggleButton();
        confirm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        instructions.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        instructions.setText("Choose a Piece to Queen Your Pawn");

        queen.setSelected(true);
        queen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queenActionPerformed(evt);
            }
        });

        rook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rookActionPerformed(evt);
            }
        });

        bishop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bishopActionPerformed(evt);
            }
        });

        knight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knightActionPerformed(evt);
            }
        });

        confirm.setText("Confirm Selection");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(instructions))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(queen, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(rook, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bishop, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(knight, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(confirm)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instructions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(queen, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rook, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bishop, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(knight, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(confirm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void queenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queenActionPerformed
        if (queen.isSelected()) {
            rook.setSelected(false);
            bishop.setSelected(false);
            knight.setSelected(false);
        }
        else {
            queen.setSelected(true);
        }
    }//GEN-LAST:event_queenActionPerformed

    private void rookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rookActionPerformed
        if (rook.isSelected()) {
            queen.setSelected(false);
            bishop.setSelected(false);
            knight.setSelected(false);
        }
        else {
            rook.setSelected(true);
        }
    }//GEN-LAST:event_rookActionPerformed

    private void bishopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bishopActionPerformed
        if (bishop.isSelected()) {
            rook.setSelected(false);
            queen.setSelected(false);
            knight.setSelected(false);
        }
        else {
            bishop.setSelected(true);
        }
    }//GEN-LAST:event_bishopActionPerformed

    private void knightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knightActionPerformed
        if (knight.isSelected()) {
            rook.setSelected(false);
            bishop.setSelected(false);
            queen.setSelected(false);
        }
        else {
            knight.setSelected(true);
        }
    }//GEN-LAST:event_knightActionPerformed

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        parent.setPiece(this.getSelected());
        owner.dispose();
    }//GEN-LAST:event_confirmActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton bishop;
    private javax.swing.JButton confirm;
    private javax.swing.JLabel instructions;
    private javax.swing.JToggleButton knight;
    private javax.swing.JToggleButton queen;
    private javax.swing.JToggleButton rook;
    // End of variables declaration//GEN-END:variables
}
