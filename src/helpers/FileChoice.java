package helpers;

import gameboard.ChessGame;
import java.io.File;
import javax.swing.DefaultListModel;

/**
 *
 * @author Jared Cassarly
 */
public class FileChoice extends javax.swing.JPanel {
    
    private ChessGame parent;
    private ModalityPanel owner;
    
    final static public String SAVE_DIRECTORY = "saves";

    /**
     * Creates new form FileChoice
     */
    public FileChoice() {
        initComponents();
    }
    
    public FileChoice(ChessGame parent, ModalityPanel owner) {
        this.parent = parent;
        this.owner = owner;
        initComponents();
    }
    
    public void allowNew(boolean b) {
        newSave.setEnabled(b);
        newSave.setVisible(b);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        choose = new javax.swing.JLabel();
        confirmSelection = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        newSave = new javax.swing.JButton();

        fileList.setModel(getSaves());
        jScrollPane1.setViewportView(fileList);

        choose.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        choose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        choose.setText("Choose a Save");

        confirmSelection.setText("Confirm");
        confirmSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmSelectionActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        newSave.setText("New");
        newSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(newSave)
                                .addGap(123, 123, 123)
                                .addComponent(confirmSelection))
                            .addComponent(choose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(choose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmSelection)
                    .addComponent(newSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSaveActionPerformed
        ModalityPanel newFile = new ModalityPanel(this, owner);
    }//GEN-LAST:event_newSaveActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        owner.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void confirmSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmSelectionActionPerformed
        int index = fileList.getSelectedIndex();
        if (index > -1) {
            DefaultListModel<String> model = this.getSaves();
            String filename = model.get(index);
            parent.setFilename(SAVE_DIRECTORY + "/" + filename);
            owner.dispose();
        }
        else {
            Message.errorMessage("Please Choose a File");
        }
    }//GEN-LAST:event_confirmSelectionActionPerformed

    // <editor-fold defaultstate="collapsed" desc="Get Saves">
    /**
     * Returns the ListModel of the saves in the directory stored at the address in SAVE_DIRECTORY
     * @return the DefaultListModel containing the directory names of the saves
     */
    public DefaultListModel<String> getSaves() {
        File saves = new File(SAVE_DIRECTORY);
        if (saves.isDirectory()) {
            String[] files = saves.list();
            DefaultListModel<String> list = new DefaultListModel();
            for (int i = 0; i < files.length; i++) {
                File f = new File(SAVE_DIRECTORY + "/" + files[i]);
                if (f.isDirectory()) {
                    list.addElement(files[i]);
                }
            }
            return list;
        }
        else {
            saves.mkdir();
            return new DefaultListModel();
        }
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Add New File">
    public void newFile(String filename) {
        File newFile = new File(SAVE_DIRECTORY + "/" + filename);
        if (newFile.exists()) {
            Message.errorMessage(filename + " already exists.");
        }
        else {
            newFile.mkdir();
            // add the actual save files
            fileList.setModel(this.getSaves());
            File saves = new File(SAVE_DIRECTORY);
            if (saves.isDirectory()) {
                String[] files = saves.list();
                for (int i = 0; i < files.length; i++) {
                    if (files[i].equals(filename)) {
                        fileList.setSelectedIndex(i);
                    }
                }
            }
        }
    }
    // </editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JLabel choose;
    private javax.swing.JButton confirmSelection;
    private javax.swing.JList fileList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newSave;
    // End of variables declaration//GEN-END:variables
}
